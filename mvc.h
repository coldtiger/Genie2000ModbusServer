#if !defined(AFX_MVC_H__3C607510_EAA6_484A_87EA_11E1ED8F284F__INCLUDED_)
#define AFX_MVC_H__3C607510_EAA6_484A_87EA_11E1ED8F284F__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CMvc wrapper class

class CMvc : public CWnd
{
protected:
	DECLARE_DYNCREATE(CMvc)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x78559301, 0x9d8, 0x11d2, { 0x85, 0xd3, 0x20, 0x4c, 0x4f, 0x4f, 0x50, 0x20 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	void SetBackColor(unsigned long newValue);
	unsigned long GetBackColor();
	BOOL GetExpandMode();
	void SetExpandMode(BOOL bNewValue);
	BOOL GetLinearScale();
	void SetLinearScale(BOOL bNewValue);
	BOOL GetDisplayPoints();
	void SetDisplayPoints(BOOL bNewValue);
	BOOL GetShowStatus();
	void SetShowStatus(BOOL bNewValue);
	BOOL GetShowInfo();
	void SetShowInfo(BOOL bNewValue);
	BOOL GetShowCompressedData();
	void SetShowCompressedData(BOOL bNewValue);
	unsigned long GetRoiType1Color();
	void SetRoiType1Color(unsigned long newValue);
	unsigned long GetRoiType2Color();
	void SetRoiType2Color(unsigned long newValue);
	unsigned long GetRoiType3Color();
	void SetRoiType3Color(unsigned long newValue);
	unsigned long GetRoiType4Color();
	void SetRoiType4Color(unsigned long newValue);
	unsigned long GetKeylineColor();
	void SetKeylineColor(unsigned long newValue);
	unsigned long GetNuclineColor();
	void SetNuclineColor(unsigned long newValue);
	long GetNumberOfTicks();
	void SetNumberOfTicks(long nNewValue);
	void DisplaySource(const VARIANT& vVar);
	void AcquireStart(long Options);
	void AcquireStop(long Options);
	void AcquirePause(long Options);
	void Clear(long Options);
	void Open(LPCTSTR bstrName, long lOptions, long SourceType, LPCTSTR bstrCom, long BaudRate);
	void Close(long lOptions);
	LPDISPATCH GetCurrentDataSource();
	void SetCurrentDataSource(LPDISPATCH newValue);
	void AddRoi();
	void DeleteRoi();
	void NextRoi();
	void PreviousRoi();
	VARIANT GetSourceList();
	void DeleteAllRois();
	void SaveRois(LPCTSTR Name, BOOL OverWrite);
	void LoadRois(LPCTSTR Name, BOOL ByEnergy);
	void CloseAll();
	VARIANT GetParam(long Params, long lRec, long lEntry);
	void SetParam(long Params, long lRec, long lEntry, const VARIANT& newValue);
	VARIANT GetParamArray(VARIANT* pvCodes, long lRec, long lEntry);
	void SetParamArray(VARIANT* pvCodes, long lRec, long lEntry, const VARIANT& newValue);
	void Save(LPCTSTR Name, BOOL OverWrite);
	void SetDisplayType(long nNewValue);
	long GetDisplayType();
	void SpectroscopyAcquireSetup(long Mode, double Limit, long lStart, long lEnd, double ElapsedTime);
	void NeutronAcquireSetup(float GateWidth, float Predelay, double CountTime, long Cycles, long HighVoltage, float DeadTime, BOOL Verify);
	void CopyToClipBoard();
	void NextSource();
	void PreviousSource();
	CString GetCurrentDataSourceName();
	long GetCurrentDataSourceType();
	void PrintPlotDialog();
	void VerifyInputDevices();
	void ZoomOut();
	BOOL GetActivateZoom();
	void SetActivateZoom(BOOL bNewValue);
	void GetPlotLimits(double* MinX, double* MaxX, double* MinY, double* MaxY);
	void SetPlotLimits(double MinX, double MaxX, double MinY, double MaxY);
	long GetDisplayUpdateRate();
	void SetDisplayUpdateRate(long nNewValue);
	BOOL GetShowSpectralDataSpreadSheet();
	void SetShowSpectralDataSpreadSheet(BOOL bNewValue);
	BOOL GetShowCalculationSpreadSheet();
	void SetShowCalculationSpreadSheet(BOOL bNewValue);
	BOOL GetShowInputDevSpreadSheet();
	void SetShowInputDevSpreadSheet(BOOL bNewValue);
	void ExportData(LPCTSTR FileName);
	unsigned long GetSpectrumColor();
	void SetSpectrumColor(unsigned long newValue);
	BOOL GetShowCoincidenceSpreadsheet();
	void SetShowCoincidenceSpreadsheet(BOOL bNewValue);
	void PlotCoincidenceRate(long RateToPlot);
	BOOL GetAutoScale();
	void SetAutoScale(BOOL bNewValue);
	float GetNumberOfStandardDeviations();
	void SetNumberOfStandardDeviations(float newValue);
	void PlotCoincidenceDistribution(long RateToPlot);
	long GetCoincidenceRateDistributionBinSize();
	void SetCoincidenceRateDistributionBinSize(long nNewValue);
	void PlotHistogram(long Rec);
	void PlotScalarBank(long Rec);
	long GetNumberOfSources();
	BOOL GetShowingMultiplicity();
	BOOL GetShowingRateDistribution();
	BOOL GetShowingRatePlot();
	BOOL GetShowingScalars();
	BOOL GetShowXAxisGridLines();
	void SetShowXAxisGridLines(BOOL bNewValue);
	BOOL GetXAxisAsEnergy();
	void SetXAxisAsEnergy(BOOL bNewValue);
	BOOL GetShowYAxisGridLines();
	void SetShowYAxisGridLines(BOOL bNewValue);
	BOOL GetShowPlotBorders();
	void SetShowPlotBorders(BOOL bNewValue);
	BOOL GetHasNeutronAndSpectroscopy();
	long GetPlotPointSize();
	void SetPlotPointSize(long nNewValue);
	BOOL DataSourceIsLoaded(LPCTSTR Name);
	BOOL GetShowSpectralPeakInformation();
	void SetShowSpectralPeakInformation(BOOL bNewValue);
	void NextNuclideLine();
	void PreviousNuclideLine();
	void NextNuclide();
	void PreviousNuclide();
	BOOL GetShowSpectralNuclideAnnotationsLines();
	void SetShowSpectralNuclideAnnotationsLines(BOOL bNewValue);
	void MoveSpectralPlotCursor(long Cursor, float Value, BOOL IsEnergy);
	long GetNumberOfSpectralRois();
	BOOL GetFillSpectralRois();
	void SetFillSpectralRois(BOOL bNewValue);
	BOOL GetEnableDragAndDrop();
	void SetEnableDragAndDrop(BOOL bNewValue);
	VARIANT GetParamArrayEx(long Code, long Num, long Options, long lRec, long lEntry);
	void SetParamArrayEx(long Code, long Num, long Options, long lRec, long lEntry, const VARIANT& newValue);
	BOOL IsWarning(long lStat);
	BOOL IsError(long lStat);
	CString Message(long Code);
	BOOL GetIsModified();
	void SpectralPlotAxisLabels(LPCTSTR ChanX, LPCTSTR EnergyX, LPCTSTR Y);
	void AddRoiEx(long Start, long End, long Type);
	void DeleteRoiEx(long Start, long End, long Type);
	BOOL GetRealTimeUpdateExpandBox();
	void SetRealTimeUpdateExpandBox(BOOL bNewValue);
	void ShowVertAnnotationLines(VARIANT* Lines, VARIANT* Color, VARIANT* LineTypes);
	void HideVertAnnotationLines();
	VARIANT GetProperties(const VARIANT& Prop);
	void SetProperties(const VARIANT& Prop, const VARIANT& newValue);
	long RoiType(long LeftCh, long RightCh);
	void AttachSynchronousDevices(LPCTSTR bstrName, long lOptions, long lType, LPCTSTR bstrExtra, long lBaudRate);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_MVC_H__3C607510_EAA6_484A_87EA_11E1ED8F284F__INCLUDED_)
